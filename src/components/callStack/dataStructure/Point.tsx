import React, { useEffect, useState } from 'react';
import * as d3 from 'd3';
import { slot, signal, remove } from '../../emitter';
import { DataStructureInfo } from './DataStructureDrawer';

interface PointProps {
  info: DataStructureInfo;
}

function Point({ info }: PointProps) {
  const [offsetX, offsetY] = [-11.5, 0];

  useEffect(() => {
    d3.selectAll('.point-arrow').call(
      d3
        .drag()
        .on('start', function (this: any, d: any) {})
        .on('drag', function (this: any, d: any) {
          d3.select(this).attr('transform', function () {
            let source = this.attributes.transform.value.replace(')', '');
            source = source.split(',');
            let tx = d.dx + Number(source[4]);
            let ty = d.dy + Number(source[5]);
            return 'matrix(1,0,0,1,' + tx + ',' + ty + ')';
          });
        })
        .on('end', function (this: any, d: any) {
          let p = d3.select(this.parentNode);
          let g = d3.select(this);
          let blocks = d3.select('#svg').selectAll('.data_structure');
          let [dx, dy] = [0, 0];
          let transform = g.attr('transform');
          let pos: number[] = [];
          let t = p.attr('transform');
          pos[0] = Number.parseFloat(t.split(',')[4]);
          pos[1] = Number.parseFloat(t.split(',')[5].split(')')[0]);

          dx = Number.parseFloat(transform.split(',')[4]) + pos[0] - offsetX;
          dy =
            Number.parseFloat(transform.split(',')[5].split(')')[0]) +
            pos[1] -
            offsetY;
          let flag = false;
          blocks.each(function (_, i) {
            if (flag) {
              return;
            }
            const rect = d3.select(this);
            const trans = d3
              .select((this as any).parentNode.parentNode)
              .attr('transform');
            const x =
              Number.parseInt(rect.attr('x')) +
              Number.parseFloat(trans.split(',')[4]);
            const y =
              Number.parseInt(rect.attr('y')) +
              Number.parseFloat(trans.split(',')[5].split(')')[0]);

            if (dx >= x && dx < x + 60 && dy >= y && dy < y + 50) {
              flag = true;
              let [posX, posY] = [x + 30 + offsetX, y + 50 + offsetY];
              signal(
                'updatePointPos',
                info.getFuncName(),
                info.getVarName(),
                posX,
                posY
              );
              p.attr('transform', `matrix(1,0,0,1,${posX},${posY})`);
              g.attr('transform', 'matrix(1,0,0,1,0,0)');
              return;
            }
          });
        }) as any
    );
    return () => {};
  }, []);

  return (
    <g className="point-arrow" transform="matrix(1,0,0,1,0,0)">
      <text
        x={5}
        y={45}
        fontSize="20"
        fill={'rgb(139, 139, 139)'}
        className="variable-name"
        fontWeight="blod"
      >
        {info.getVarName()}
      </text>

      <svg
        className="icon"
        width="23px"
        height="26px"
        viewBox="0 0 23 26"
        version="1.1"
        xmlns="http://www.w3.org/2000/svg"
      >
        {/* <g stroke="none" stroke-width="1" fill="none"> */}
        <g
          transform="translate(1.000000, 1.000000)"
          // fill-rule="nonzero"
          fill="rgba(0,0,0,0)"
          stroke="#A0A0A0"
          stroke-width="1.75"
        >
          <g transform="translate(10.500000, 12.222222) rotate(90.000000) translate(-10.500000, -12.222222) translate(-1.000000, 2.000000)">
            <path d="M21.2480469,5.03837137 L21.2355686,5.03837137 L21.2355686,5.03582803 L19.8854167,5.03582803 L19.8854167,5.03328468 L11.5399306,5.03328468 C11.2753906,4.97478769 11.0707465,4.7560598 11.030816,4.48137827 L11.030816,1.05294586 C11.030816,1.03514243 11.030816,1.01988234 11.0283203,1.00207891 C11.0283203,0.994448868 11.0283203,0.986818825 11.0258247,0.976645435 C11.0258247,0.969015393 11.0258247,0.958842003 11.023329,0.95121196 C11.023329,0.94103857 11.0208333,0.93086518 11.0208333,0.920691791 C11.0208333,0.913061748 11.0183377,0.907975053 11.0183377,0.900345011 C11.015842,0.890171621 11.015842,0.877454883 11.0133464,0.867281493 C11.0133464,0.862194798 11.0108507,0.857108103 11.0108507,0.849478061 C11.008355,0.839304671 11.0058594,0.826587933 11.0033637,0.816414544 C11.0033637,0.811327849 11.0008681,0.806241154 11.0008681,0.801154459 L10.9933811,0.770634289 C10.9908854,0.765547594 10.9908854,0.757917551 10.9883898,0.752830856 C10.9858941,0.742657466 10.9833984,0.732484076 10.9784071,0.724854034 C10.9759115,0.717223992 10.9734158,0.712137297 10.9709201,0.704507254 C10.9684245,0.696877212 10.9634332,0.686703822 10.9609375,0.679073779 L10.9534505,0.656183652 C10.9509549,0.648553609 10.9459635,0.640923567 10.9434679,0.633293524 C10.9409722,0.625663482 10.9359809,0.615490092 10.9334852,0.60786005 C10.9309896,0.602773355 10.9284939,0.595143312 10.9235026,0.590056617 C10.9185113,0.579883227 10.91352,0.572253185 10.9110243,0.562079795 C10.9085286,0.5569931 10.906033,0.551906405 10.9010417,0.54681971 C10.8960503,0.53664632 10.891059,0.529016277 10.8860677,0.518842887 C10.883572,0.513756192 10.8810764,0.508669498 10.8760851,0.503582803 C10.8710938,0.493409413 10.8636068,0.48577937 10.8586155,0.47560598 C10.8561198,0.470519285 10.8511285,0.46543259 10.8486328,0.460345895 C10.8436415,0.450172505 10.8361545,0.442542463 10.8286675,0.432369073 C10.8236762,0.427282378 10.8211806,0.422195683 10.8161892,0.417108988 C10.8111979,0.409478946 10.8037109,0.401848903 10.7987196,0.394218861 C10.7937283,0.386588818 10.7862413,0.381502123 10.78125,0.373872081 C10.7762587,0.368785386 10.7712674,0.361155343 10.766276,0.356068648 C10.7537977,0.343351911 10.7438151,0.330635173 10.7313368,0.317918436 C10.7188585,0.305201699 10.7063802,0.295028309 10.6939019,0.282311571 C10.6889106,0.277224876 10.6814236,0.272138181 10.6764323,0.267051486 C10.6689453,0.261964791 10.663954,0.254334749 10.656467,0.249248054 C10.64898,0.241618011 10.6414931,0.236531316 10.6340061,0.231444621 C10.6290148,0.226357926 10.6240234,0.223814579 10.6190321,0.218727884 C10.6090495,0.211097841 10.6015625,0.206011146 10.5915799,0.198381104 C10.5865885,0.195837757 10.5815972,0.190751062 10.5766059,0.188207714 C10.5666233,0.183121019 10.5591363,0.175490977 10.5491536,0.170404282 C10.5441623,0.167860934 10.539171,0.165317587 10.5341797,0.160230892 C10.524197,0.155144197 10.5167101,0.150057502 10.5067274,0.144970807 C10.5017361,0.142427459 10.4967448,0.139884112 10.4917535,0.134797417 C10.4817708,0.129710722 10.4742839,0.124624027 10.4643012,0.122080679 C10.4593099,0.119537332 10.4518229,0.116993984 10.4468316,0.111907289 C10.4393446,0.106820594 10.429362,0.104277247 10.421875,0.1017339 C10.414388,0.099190552 10.406901,0.094103857 10.3994141,0.0915605096 L10.3769531,0.0839304671 C10.3694661,0.0813871196 10.3594835,0.0763004246 10.3519965,0.0737570771 C10.3445095,0.0712137297 10.3395182,0.0686703822 10.3320312,0.0661270347 C10.3220486,0.0635836872 10.312066,0.0584969922 10.304579,0.0559536447 C10.2995877,0.0534102972 10.2921007,0.0534102972 10.2871094,0.0508669498 L10.2571615,0.0432369073 C10.2521701,0.0406935598 10.2471788,0.0406935598 10.2396918,0.0381502123 C10.2297092,0.0356068648 10.2172309,0.0330635173 10.2072483,0.0305201699 C10.2022569,0.0305201699 10.1972656,0.0279768224 10.1897786,0.0279768224 C10.179796,0.0254334749 10.1673177,0.0228901274 10.1573351,0.0228901274 C10.1498481,0.0228901274 10.1448568,0.0203467799 10.1373698,0.0203467799 C10.1273872,0.0178034324 10.1174045,0.0178034324 10.1074219,0.0178034324 C10.0999349,0.0178034324 10.0899523,0.0152600849 10.0824653,0.0152600849 C10.0749783,0.0152600849 10.0674913,0.0127167374 10.0600043,0.0127167374 C10.0275608,0.01017339 9.99262153,0.01017339 9.95768229,0.0127167374 C9.95019531,0.0127167374 9.94270833,0.0127167374 9.93522135,0.0152600849 C9.92773438,0.0152600849 9.91775174,0.0152600849 9.91026476,0.0178034324 C9.90028212,0.0178034324 9.89029948,0.0203467799 9.88031684,0.0203467799 C9.87282986,0.0203467799 9.86783854,0.0228901274 9.86035156,0.0228901274 C9.85036892,0.0254334749 9.83789062,0.0254334749 9.82790799,0.0279768224 C9.82291667,0.0279768224 9.81792535,0.0305201699 9.81043837,0.0305201699 C9.80045573,0.0330635173 9.78797743,0.0356068648 9.77799479,0.0381502123 C9.77300347,0.0406935598 9.76801215,0.0406935598 9.76052517,0.0432369073 L9.73057726,0.0508669498 C9.72558594,0.0534102972 9.71809896,0.0534102972 9.71310764,0.0559536447 C9.703125,0.0584969922 9.69314236,0.0610403397 9.68565538,0.0661270347 C9.6781684,0.0686703822 9.67317708,0.0712137297 9.6656901,0.0737570771 C9.65820312,0.0763004246 9.64822049,0.0813871196 9.64073351,0.0839304671 C9.63324653,0.0864738146 9.62575955,0.0890171621 9.61827257,0.094103857 C9.61078559,0.0966472045 9.60329861,0.1017339 9.59581163,0.104277247 C9.58832465,0.106820594 9.57834201,0.111907289 9.57085503,0.114450637 C9.56586372,0.116993984 9.55837674,0.119537332 9.55338542,0.124624027 C9.54340278,0.129710722 9.5359158,0.134797417 9.52593316,0.139884112 C9.52094184,0.142427459 9.51595052,0.144970807 9.5109592,0.150057502 C9.50097656,0.155144197 9.49099392,0.160230892 9.48350694,0.165317587 C9.47851562,0.167860934 9.47352431,0.170404282 9.46853299,0.175490977 C9.45855035,0.180577672 9.44856771,0.188207714 9.44108073,0.193294409 C9.43608941,0.195837757 9.43109809,0.200924452 9.42610677,0.203467799 C9.41612413,0.208554494 9.40863715,0.216184536 9.39865451,0.223814579 C9.39366319,0.228901274 9.38867187,0.231444621 9.38368056,0.236531316 C9.37619358,0.241618011 9.3687066,0.249248054 9.35872396,0.254334749 C9.35123698,0.259421444 9.34624566,0.264508139 9.33875868,0.272138181 C9.33376736,0.277224876 9.32628038,0.282311571 9.32128906,0.287398266 C9.30881076,0.297571656 9.29633247,0.310288393 9.28634983,0.323005131 L0.331922743,9.44344922 L0.309461806,9.46633935 C0.109809028,9.66980715 0.00998263889,9.93685863 0.00998263889,10.2039101 C0.00998263889,10.4709616 0.109809028,10.7380131 0.309461806,10.9414809 L0.331922743,10.964371 L9.28634983,20.0899018 C9.48849826,20.295913 9.75553385,20.3976469 10.0200738,20.3951035 L10.0300564,20.3951035 C10.5940755,20.3951035 11.0532769,19.9296709 11.0532769,19.352331 L11.0532769,15.2804317 L21.6024306,15.2804317 C22.296224,15.1354609 22.8377821,14.5555777 22.9401042,13.8358103 L22.9401042,6.59235669 C22.8502604,5.7199885 22.1265191,5.03837137 21.2480469,5.03837137 Z"></path>
          </g>
        </g>
        {/* </g> */}
        {/* <path
          d="M926 512.735C926 571.424 878.424 619 819.735 619h-248.47C512.576 619 465 571.424 465 512.735v-0.47C465 453.576 512.576 406 571.265 406h248.47C878.424 406 926 453.576 926 512.265v0.47z"
          fill="white"
          stroke="#979797"
          strokeWidth="8"
          p-id="1081"
        ></path>
        <path
          d="M393.253 211.526l-20.039 16.782-123.556 103.274L207 367.183v0.145l-39.684 33.48-25.064 21.12c-22.134 18.592-35.922 41.499-41.51 65.496-5.388 23.137-3.028 47.277 6.944 69.558 7.388 16.509 18.961 32.002 34.772 45.283l20.973 17.595a126.607 126.607 0 0 0 3.903 3.42l40.138 33.612 42.422 35.526 118.205 99.202a133.348 133.348 0 0 0 5.115 4.072l20.039 16.782c36.111 30.193 79.632 36.734 116.905 22.18 24.035-9.384 45.478-27.516 60.637-53.813l2.168-3.765c5.847-12.988 9.483-27.541 10.548-43.261l0.454 0.442s-41.796-154.376-41.796-222.16 41.7-212.588 41.7-212.588c-0.035-19.327-3.918-37.061-10.907-52.586l-2.168-3.765c-14.4-24.98-34.475-42.577-57.051-52.322a110.188 110.188 0 0 0-3.585-1.492c-37.273-14.552-80.794-8.011-116.905 22.182z"
          fill="white"
          stroke="#979797"
          strokeWidth="8"
          p-id="1082"
        ></path> */}
      </svg>
    </g>
  );
}

export default Point;
